/*
 * This source file was generated by the Gradle 'init' task
 */
package de.esempe.workflow;

import java.util.List;
import java.util.Set;

import org.bson.UuidRepresentation;
import org.tinylog.Logger;

import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;

import de.esempe.workflow.domain.Rule;
import de.esempe.workflow.domain.State;
import de.esempe.workflow.domain.Transition;
import de.esempe.workflow.domain.Transition.TransistionType;
import de.esempe.workflow.domain.Workflow;
import dev.morphia.Datastore;
import dev.morphia.Morphia;
import dev.morphia.config.MorphiaConfig;
import dev.morphia.query.Query;

public class App
{

	public static void main(final String[] args) throws InterruptedException
	{
		CDI.CONTAINER.isRunning();

		final App app = new App();
		// app.runDemoWorkflow();
		// app.runDemoMongoDB();
		app.runDemoMorphia();

	}

	private void runDemoMorphia()
	{
		final String uri = "mongodb://127.0.0.1:27017";
		final ConnectionString connectionString = new ConnectionString(uri);

		final MongoClientSettings settings = MongoClientSettings.builder()//
				.applyConnectionString(connectionString)//
				.uuidRepresentation(UuidRepresentation.STANDARD)//
				.build();

		final MongoClient mongoClient = MongoClients.create(settings);

		final MorphiaConfig config = MorphiaConfig.load();
		final Datastore datastore = Morphia.createDatastore(mongoClient, config);

		final var save = Boolean.TRUE;
		if (save)
		{

			final Workflow demoWf = this.defineWorkflow();

			final Set<Transition> transitions = demoWf.getTransitions();
			for (final Transition t : transitions)
			{
				if (t.getDbId().isEmpty())
				{
					if (t.getFromState().getDbId().isEmpty())
					{
						datastore.save(t.getFromState());
					}
					if (t.getToState().getDbId().isEmpty())
					{
						datastore.save(t.getToState());
					}
					datastore.save(t);
				}
			}

			datastore.save(demoWf);
		}

		final Query<Workflow> query = datastore.find(Workflow.class);
		final List<Workflow> items = query.iterator().toList();
		for (final Workflow item : items)
		{
			System.out.println(item.toString());
		}

		Logger.info("done");
	}

//	private void runDemoWorkflow() throws InterruptedException
//	{
//		final PureWorkflow wf = this.defineWorkflow();
//		final Workflowinstance instance = new Workflowinstance(wf);
//
//		final JsonObject data = Json.createObjectBuilder() //
//				.add("pc", "R9575") //
//				.add("dauer", 60) //
//				.add("begründung", "SW-Installation").build();
//
//		instance.start(data);
//		Thread.sleep(5000);
//
//		final List<PureTransition> currentTransistions = instance.getCurrentTransistions();
//		instance.fireTransition(currentTransistions.get(0));
//
//		Logger.info("done");
//	}

	private Workflow defineWorkflow()
	{
		final Workflow result = new Workflow("Demo");// CDI.CONTAINER.getType(PureWorkflow.class);

		final State start = new State("Start");
		final State genehmigt = new State("Genehmigt");
		final State abgelehnt = new State("Abgelehnt");
		final State pruefen = new State("prüfen");

		final Transition automatischeGenehmigung = new Transition("Automatische Genehmigung", start, genehmigt);
		automatischeGenehmigung.setType(TransistionType.SYSTEM);

		var script = """
				import groovy.json.JsonSlurper
				def jsonSlurper = new JsonSlurper()
				def map = jsonSlurper.parseText(data)
				map.dauer == 4;
				""";

		final Rule ruleMinDauer = new Rule("Minimale Dauer", script);
		automatischeGenehmigung.setRule(ruleMinDauer);

		final Transition manuellePruefung = new Transition("Manuelle Prüfung", start, pruefen);
		manuellePruefung.setType(TransistionType.SYSTEM);
		script = """
				import groovy.json.JsonSlurper
				def jsonSlurper = new JsonSlurper()
				def map = jsonSlurper.parseText(data)
				map.dauer == 60;
				""";

		final Rule ruleMaxDauer = new Rule("Maximale Dauer", script);
		manuellePruefung.setRule(ruleMaxDauer);

		final Transition manuelleGenehmigung = new Transition("Manuelle Prüfung", pruefen, genehmigt);
		final Transition manuelleAblehnung = new Transition("Manuelle Prüfung", pruefen, abgelehnt);

		result.addTransition(automatischeGenehmigung);
		result.addTransition(manuellePruefung);
		result.addTransition(manuelleGenehmigung);
		result.addTransition(manuelleAblehnung);

		return result;
	}

}
