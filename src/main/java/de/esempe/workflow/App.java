/*
 * This source file was generated by the Gradle 'init' task
 */
package de.esempe.workflow;

import java.util.List;

import org.bson.Document;
import org.tinylog.Logger;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import de.esempe.workflow.PureTransition.TransistionType;
import de.esempe.workflow.domain.Rule;
import de.esempe.workflow.domain.State;
import de.esempe.workflow.domain.Transition;
import dev.morphia.Datastore;
import dev.morphia.Morphia;
import dev.morphia.config.MorphiaConfig;
import dev.morphia.query.Query;
import jakarta.json.Json;
import jakarta.json.JsonObject;

public class App
{

	public static void main(final String[] args) throws InterruptedException
	{
		CDI.CONTAINER.isRunning();

		final App app = new App();
		// app.runDemoWorkflow();
		// app.runDemoMongoDB();
		app.runDemoMorphia();

	}

	private void runDemoMorphia()
	{
		final String uri = "mongodb://127.0.0.1:27017";
		final MongoClient mongoClient = MongoClients.create(uri);
		final MorphiaConfig config = MorphiaConfig.load();
		final Datastore datastore = Morphia.createDatastore(mongoClient, config);

		// final User user1 = new User("rebecca");
		// final User save = datastore.save(user1);

		final State stateStart = new State("Start");
		final State stateEnd = new State("Ende");
//		final JsonObjectBuilder builder = Json.createObjectBuilder();
//		builder.add("name", "Eva");
//		builder.add("age", 30);
//		builder.add("city", "York");
//
//		// Build the JsonObject
//		final JsonObject jsonObject = builder.build();
//		state.setData(jsonObject);
//
		datastore.save(stateStart);
		datastore.save(stateEnd);

		final Transition t = new Transition("Bearbeiten", stateStart, stateEnd);

		final var script = """
				import groovy.json.JsonSlurper
				def jsonSlurper = new JsonSlurper()
				def map = jsonSlurper.parseText(data)
				map.dauer == 4;
				""";

		final Rule ruleMinDauer = new Rule("Minimale Dauer", script);
		t.setRule(ruleMinDauer);
		datastore.save(t);

		final Query<Transition> query = datastore.find(Transition.class);
		final List<Transition> items = query.iterator().toList();
		for (final Transition item : items)
		{
			System.out.println(item.toString());
		}

		Logger.info("done");
	}

	private void runDemoMongoDB()
	{
		final String uri = "mongodb://127.0.0.1:27017";
		final MongoClient mongoClient = MongoClients.create(uri);
		final MongoDatabase database = mongoClient.getDatabase("testdb");

		database.createCollection("workflows");
		final MongoCollection<Document> collection = database.getCollection("workflows");

		// collection.insertOne(new Document().append("_id", new ObjectId()).append("title", "Workflow Admin-Rechte"));
		// collection.insertOne(new Document().append("_id", new ObjectId()).append("title", "Workflow WWS-Rechte"));

		final long countDocuments = collection.countDocuments();
		System.out.println("Anzahl: " + countDocuments);

		final Document firstDoc = collection.find().first();

		Logger.info("done");
	}

	private void runDemoWorkflow() throws InterruptedException
	{
		final PureWorkflow wf = this.defineWorkflow();
		final Workflowinstance instance = new Workflowinstance(wf);

		final JsonObject data = Json.createObjectBuilder() //
				.add("pc", "R9575") //
				.add("dauer", 60) //
				.add("begründung", "SW-Installation").build();

		instance.start(data);
		Thread.sleep(5000);

		final List<PureTransition> currentTransistions = instance.getCurrentTransistions();
		instance.fireTransition(currentTransistions.get(0));

		Logger.info("done");
	}

	private PureWorkflow defineWorkflow()
	{
		final PureWorkflow result = CDI.CONTAINER.getType(PureWorkflow.class);

		final PureState start = new PureState("Start");
		final PureState genehmigt = new PureState("Genehmigt");
		final PureState abgelehnt = new PureState("Abgelehnt");
		final PureState pruefen = new PureState("prüfen");

		final PureTransition automatischeGenehmigung = new PureTransition("Automatische Genehmigung", start, genehmigt);
		automatischeGenehmigung.setType(TransistionType.SYSTEM);

		var script = """
				import groovy.json.JsonSlurper
				def jsonSlurper = new JsonSlurper()
				def map = jsonSlurper.parseText(data)
				map.dauer == 4;
				""";

		// final PureRule ruleMinDauer = RuleCreator.build("Minimale Dauer", script);
		// automatischeGenehmigung.setRule(ruleMinDauer);

		final PureTransition manuellePruefung = new PureTransition("Manuelle Prüfung", start, pruefen);
		manuellePruefung.setType(TransistionType.SYSTEM);
		script = """
				import groovy.json.JsonSlurper
				def jsonSlurper = new JsonSlurper()
				def map = jsonSlurper.parseText(data)
				map.dauer == 60;
				""";

		// final PureRule ruleMaxDauer = RuleCreator.build("Maximale Dauer", script);
		// manuellePruefung.setRule(ruleMaxDauer);

		final PureTransition manuelleGenehmigung = new PureTransition("Manuelle Prüfung", pruefen, genehmigt);
		final PureTransition manuelleAblehnung = new PureTransition("Manuelle Prüfung", pruefen, abgelehnt);

		result.addTransition(automatischeGenehmigung);
		result.addTransition(manuellePruefung);
		result.addTransition(manuelleGenehmigung);
		result.addTransition(manuelleAblehnung);

		return result;
	}

}
